# coding=utf-8
# References
# (1) https://huggingface.co/datasets/xsum/blob/main/xsum.py
"""Distilled XSum dataset."""


import os

import datasets

_CITATION = ""

_DESCRIPTION = """
Distilled Extreme Summarization (XSum) Dataset.
There are three features:
  - document: Input news article.
  - summary: One sentence summary of the article.
  - id: BBC ID of the article.

The pseudo labels are generated by running google/pegasus-xsum on XSum.
"""


_DL_URLS = {
    "xsum_pegasus_pl": "https://cdn-datasets.huggingface.co/pseudo/xsum/pegasus_xsum.tgz",
}

_DOCUMENT = "document"
_SUMMARY = "summary"

# obtained by checking the number of lines in the files.
_NUM_EXAMPLES = {"train": 204017, "val": 11327, "test": 11333}

# maps from datasets.Split to the one used in the downloaded data.
_SPLIT_MAP = {"train": "train", "test": "test", "validation": "val"}


class DistilXSum(datasets.GeneratorBasedBuilder):
    """Extreme Summarization (XSum) Dataset."""

    VERSION = datasets.Version("1.0.0")

    def _info(self):
        return datasets.DatasetInfo(
            description=_DESCRIPTION,
            features=datasets.Features(
                {
                    _DOCUMENT: datasets.Value("string"),
                    _SUMMARY: datasets.Value("string"),
                }
            ),
            supervised_keys=(_DOCUMENT, _SUMMARY),
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager):
        """Returns SplitGenerators."""
        extracted_path = dl_manager.download_and_extract(_DL_URLS["xsum_pegasus_pl"])
        return [
            datasets.SplitGenerator(
                name=split,
                gen_kwargs={
                    "src_path": os.path.join(
                        extracted_path, "dpx_pl", f"{_SPLIT_MAP[split]}.source"
                    ),
                    "tgt_path": os.path.join(
                        extracted_path, "dpx_pl", f"{_SPLIT_MAP[split]}.target"
                    ),
                    "num_examples": _NUM_EXAMPLES[_SPLIT_MAP[split]],
                },
            )
            for split in [
                datasets.Split.TRAIN,
                datasets.Split.VALIDATION,
                datasets.Split.TEST,
            ]
        ]

    def _generate_examples(self, src_path, tgt_path, num_examples):
        """This function returns the examples in the raw text form.

        The arguments should match the ones in _SplitGenerator.

        """
        with open(src_path) as src, open(tgt_path) as tgt:
            for idx in range(num_examples):
                document = src.readline().strip()
                summary = tgt.readline().strip()
                yield idx, {
                    _DOCUMENT: document,
                    _SUMMARY: summary,
                }
